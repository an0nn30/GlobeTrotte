def pnpm_install(name:str, srcs:list=[], deps:list=[]):
  filegroup(
    name = name + "_#pnpm_install",
    srcs = srcs,
    visibility = ["PUBLIC"],
    binary = False,
    test_only = False,
  )

  return _exec_npm(
    name = name,
    cmd = " ".join([
      "install",
      "--no-color",
      "--reporter append-only",
      "--prefer-offline",
    ]),
    srcs = srcs,
    deps = deps,
    link = True,
    at_top_level = True,
    outs = ["node_modules"],
    visibility = ["PUBLIC"],
    tools=[CONFIG.PNPM_TOOL],
  )

def pnpm_build(
  name:str,
  srcs:list=[],
  deps:list=[],
  visibility:list=None,
):
  filegroup(
    name = name + "_#pnpm_build",
    srcs = srcs,
    visibility = visibility,
    binary = False,
    test_only = False,
  )

  return pnpm_build_script(
    name = name,
    srcs = srcs,
    deps = deps,
    visibility = visibility,
    cmd = "build",
    outs = ["dist"],
    test_only = False,
    at_top_level = False,
  )

def pnpm_build_script(
  name:str,
  cmd:str,
  srcs:list=[],
  deps:list=[],
  outs:list=[],
  test_only:bool=False,
  visibility:list=None,
  nullify_outs:bool=False,
  at_top_level:bool=False,
):
  filegroup(
    name = name + "_#pnpm_build_script",
    srcs = srcs,
    visibility = visibility,
    binary = False,
    test_only = test_only,
  )

  return _exec_npm(
    name = name,
    outs = outs,
    srcs = srcs,
    deps = deps,
    test_only = test_only,
    visibility = visibility,
    at_top_level = at_top_level,
    nullify_outs = nullify_outs,
    cmd = "run --no-color " + cmd,
    tools = [CONFIG.PNPM_TOOL],
  )

def pnpm_run(
  name:str,
  cmd:str,
  shell:str="/bin/sh",
  srcs:list=[],
  deps:list=[],
  visibility:list=None,
  test_only:bool=False
):
  filegroup(
    name = name + "_#pnpm_run",
    srcs = srcs,
    visibility = ["PUBLIC"],
    binary = False,
    test_only = False,
  )

  cmd = " && ".join([
    _home_path(),
    _go_to_top_level(),
    "$TOOL run --no-color " + cmd,
  ])
  cmds = f'{{ cat > "$OUT" << EOF\n#!{shell}\n{cmd} \"\\\$@\"\nEOF\n}}'
  return build_rule(
    name = name,
    outs = [name + ".sh"],
    srcs = srcs,
    cmd = cmds,
    deps = deps,
    visibility = visibility,
    binary = True,
    test_only = test_only,
    tools = [CONFIG.PNPM_TOOL],
  )

def pnpm_test(
  name:str,
  cmd:str,
  srcs:list=[],
  deps:list=[],
  outs:list=[],
  visibility:list=None,
):
  filegroup(
    name = name + "_#pnpm_test",
    srcs = srcs,
    visibility = ["PUBLIC"],
    binary = False,
    test_only = True,
  )

  return _exec_npm(
    name = name,
    srcs = srcs,
    deps = deps,
    test = True,
    test_only = True,
    at_top_level = True,
    visibility = visibility,
    cmd = "run --no-color " + cmd,
    tools = [CONFIG.PNPM_TOOL],
  )

def _exec_npm(
  name:str,
  cmd:str,
  srcs:list=[],
  outs:list=[],
  deps:list=[],
  link:bool=False,
  test:bool=False,
  visibility:list=None,
  test_only:bool=False,
  nullify_outs:bool=False,
  at_top_level:bool=False,
  tools:list=[CONFIG.NPM_TOOL],
):
  filegroup(
    name = name + "_#exec_npm",
    srcs = srcs,
    visibility = ["PUBLIC"],
    binary = False,
    test_only = test_only,
  )

  no_test_output = False if test and len(outs) > 0 else True

  cmd = " && ".join([
    _home_path(),
    # $TOOLS only works on build time but not test time so
    # this is the best workarond I can think of for now.
    tools[0] + " " + cmd,
  ])

  if at_top_level:
    cmd = " && ".join([_go_to_top_level(), cmd])
  else:
    cmd = " && ".join([
      "rm -rf node_modules",
      "ln -s " + _top_level_dir() + "node_modules ./",
      cmd
    ])

  move = "ln -s" if link else "cp -R"

  new_outs = []

  for out in outs:
    new_outs.append(out + ".null" if nullify_outs else out)

    if at_top_level:
      moving = " ".join([move, out, "$TMP_DIR/" + out])
      if nullify_outs:
        moving += ".null"
    else:
      moving = " ".join([move, out, _top_level_dir() + out])
      if nullify_outs:
        moving = " ".join([
          moving,
          "&& mv",
          out,
          out + ".null"
        ])
    cmd = " && ".join([cmd, moving])

  if test:
    test_cmd = cmd
    cmd = ""
  else:
    test_cmd = ""

  return build_rule(
    name = name,
    cmd = cmd,
    outs = new_outs,
    srcs = srcs,
    deps = deps,
    test = test,
    tools = tools,
    test_cmd = test_cmd,
    test_only = test_only,
    visibility = visibility,
    no_test_output = no_test_output,
    binary = False,
    output_is_complete = False,
    needs_transitive_deps = True,
  )

def _home_path():
  return " ".join([
    "if [[ \"$OSTYPE\" == \"darwin\"* ]];",
    "then HOME=\"/Users/$USER\";",
    "elif [[ \"$OSTYPE\" == \"linux-gnu\"* ]];",
    "then HOME=\"/home/$USER\";",
    "fi",
  ])

def _go_to_top_level():
  return "cd " + _top_level_dir() + " || exit 1"

def _top_level_dir():
  return "$(pwd | awk -F'plz-out' '{print $1}')"

CONFIG.setdefault("NPM_TOOL", "npm")
CONFIG.setdefault("YARN_TOOL", "yarn")
CONFIG.setdefault("PNPM_TOOL", "pnpm")
